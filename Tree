# Tree Traversal(Inorder,Preorder,Postorder) 
# Using Recursion

class Node() :
    def __init__ (self,data) :
        self.data = data
        self.left = None
        self.right = None
        
def Inorder(root) :   # Inorder Traversal
    if root :
        Inorder(root.left)
        print(root.data)
        Inorder(root.right)
                    
def Preorder(root):   # Preorder Traversal
    if root :
        print(root.data)
        Inorder(root.left)
        Inorder(root.right)

def Postorder(root) :  # Postorder Traversal
    if root :
        Inorder(root.left)
        Inorder(root.right)
        print(root.data)
        
# Morris Traversal(Inorder,Preorder)
# It uses concept of Threaded binary Tree
                
def Morris_Inorder(root) :
class Node() :
    def __init__(self,val) :
        self.val = val
        self.right = None
        self.left = None

def Morris_in(root) :
    current = root
    while current is not None :
        if current.left is None :
            yield current.val
            current = current.right
        else :
            pre = current.left
            while pre.right is not None and pre.right != current :
                pre = pre.right
            if pre.right is None :
                pre.right = current # Threading Step                
                current = current.left
            else :
                pre.right = None
                yield current.val
                current = current.right

def Morris_Preorder(root) :
    current = root
    while current is not None :
        if current.left is None :
            yield current.val
            current = current.right
        else :
            pre = current.left
            while pre.right is not None and pre.right != current :
                pre = pre.right
            if pre.right is None :
                pre.right = current # Threading Step
                 yield current.val
                current = current.left
            else :
                pre.right = None             
                current = current.right

# Constructing Binary Tree from Parent  Array 


from collections import defaultdict
parent = [-1,0,0,1,1,3,5]
child = [idx for idx in range(7)] 
graph = defaultdict(list)
for i in range(7) :
    if parent[i] == -1 :
        continue
    else :
        graph[parent[i]].append(child[i])
print(graph)
def bfs(full_list,graph,node) :
    path =[]
    path.append(node)
    while path :
        cur = path.pop(0)
        print(cur)
        for neighbour in graph[cur] :
            if neighbour not in full_list :
                full_list.append(neighbour)
                path.append(neighbour)
    
print(bfs([],graph,0))
# Diameter of a Tree

class node :
    def __init__(self,data) :
        self.data = data
        self.left = None
        self.right = None
class Height :
    def __init__(self) :
        self.h = 0
def postorder(root,height) :
    lh = Height()
    rh = Height()
    if root is None :
        height.h = 0
        return 0
    l_diameter = postorder(root.left,lh)
    r_diameter = postorder(root.right,rh)

    height.h = max(lh.h, rh.h) + 1

    return max(lh.h+rh.h+1,max(l_diameter,r_diameter))

def util_postorder(self) :
    h = Height()
    return postorder(root,h)


root = node(4)
root.left = node(7)
root.right = node(8)
root.right.left = node(1)
root.right.right = node(3)
root.right.left.left = node(0)

print(util_postorder(root))


# Lowest Common Ancestor of Tree

class node :
    def __init__(self,val) :
        self.value = val
        self.left = None
        self.right = None

def lca(root,x,y) :
    q = []
    v  = [-1  for _ in range(100)]
    q.append(root)
    v.append(root)
    while len(q) > 0 :
        #print(q[0].value)
        cur = q.pop(0)
        if cur.left is not None :
            q.append(cur.left)
            v[cur.left.value] = cur.value
        if cur.right is not None :
            q.append(cur.right)
            v[cur.right.value] = cur.value
    if v[x] == v[y] :
        print(v[y])


root = node(1)
root.left = node(2)
root.right = node(3)
root.left.left = node(4)
root.left.right = node(5)
root.right.left = node(6)
root.right.right = node(7)

lca(root,6,7)


# Checking if two Trees are identical 

class node :
    def __init__(self,val) :
        self.value = val
        self.left = None
        self.right = None
class node1 :
    def __init__(self,data) :
        self.data = data
        self.left = None
        self.right = None
def identical(root,root1) :
    q1,q2 = [],[]
    l,r  = [],[]
    q1.append(root)
    q2.append(root1)
    while len(q1) > 0 :
        #print(q[0].value)
        l.append(q1[0].value)
        cur = q1.pop(0)
        if cur.left is not None :
            q1.append(cur.left)
        if cur.right is not None :
            q1.append(cur.right)
    while len(q2) > 0 :
        #print(q[0].value)
        r.append(q2[0].value)
        cur = q2.pop(0)
        if cur.left is not None :
            q2.append(cur.left)
        if cur.right is not None :
            q2.append(cur.right)
    print(l)
    print(r)
    for i in range(len(l)) :
        if l[i] == r[i] :
            continue
        else :
            return False
            break
    return True


root = node(1)
root.left = node(2)
root.right = node(3)
root.left.left = node(4)
root.left.right = node(5)
root.right.left = node(6)
root.right.right = node(7)

root1 = node(1)
root1.left = node(2)
root1.right = node(3)
root1.left.left = node(4)
root1.left.right = node(5)
root1.right.left = node(6)
root1.right.right = node(7)

if identical(root,root1) :
    print("identical")
else :
    print("not identical")
