# Palindrome Partitioning
def subset(s):
    res = []
    def pali(a,subarr):                    # Function to check Palindrome
        if a ==len(s) :                    # base condition to exit recursion
            res.append(subarr)             # returning subarray
            return
        for i in range(a,len(s)) :         # loop to partition palindrome
            if s[a:i+1] == s[a:i+1][::-1] : # if palindorme then add to subarr
                pali(i+1,subarr+[s[a:i+1]])
    pali(0,[])                              # call recurisve function
    return res
s = 'aab'
print(subset(s))


# Combination Sum II

def sub_seq(arr,k) :
    arr.sort()
    res = [[]]
    for i in range(len(arr)) :
        if i == 0 or arr[i] != arr[ i - 1] :
            l = len(res)
        for j in range(len(res) - l , len(res)) :
            res.append(res[j] + [arr[i]])
    for i in range(len(res)):
        if sum(res[i])== k :
             print(res[i])

    return

print(sub_seq(arr,k)) 


# Combination Sum I

def sub_seq(arr,k) :
    arr.sort()
    res = [[]]
    for i in range(len(arr)) :
        for j in range( len(res)) :
            res.append(res[j] + [arr[i]])
    for i in range(len(res)):
        if sum(res[i])== k :
             print(res[i])

    return

print(sub_seq(arr,k)) 


# Kth Permutation Sequence

#As you can see first digit changes after 6 occurances which is (n-1)! and the second digit changes after 2 occurances which is (n-2)!. Similarly third digit changes after 1 occurances which is (n-3)!. Is this a coincidance? Of course not. Since it is a permutation we compute it like this:
(n)(n-1)(n-2)...(1) each paranthesis represents a digit. for the first place, we have n options. After using one of the numbers, we cannot use it again. So we have n-1 number options for the second place. In the end we multiply them to get the total number of permutations. Let's say we picked '1' for the first place. now we have (n-1)! options for the rest of the number. This is why at each step a number is repeated that many time.

Let's go back to our example:

Since the first digit is repeated (n-1)! times, by dividing the k by n we can find our first digit. Division must be integer division because we are only interested in the integer part.
k=9, n=4
(n-1)! = 6
k /(n-1)!  = 1
remainder = 3
Numbers that we can use as digits are = [1,2,...,n]
So, our first digit is the digit at index 1 which is 2. We take the digit at 1 because our list is sorted so we are sure that the second smallest digit is at index 1.
Since we used 2, we need to remove it from our list and k takes the value of the remainder. You can think of lit ike this: we decided on our first digit so we can discard that part and deal with the rest of the number. As you can see the problem is the same! but this time we have (n-2)! instead of (n-1)!, k=remainder and we have one less number in our list.

import math
def seq(n,k) :
    fact = [math.factorial(i) for i in range(0,n+1)]   # calcualte factorial
    #print(fact)
    nums = [str(i) for i in range(1,n+1)]
    #print(nums)
    s = ''
    while nums :
        d = fact[len(nums) - 1]
        #print(d)
        idx = 0
        while(k>d) :
            idx+=1
            k= k%d

        s+=nums.pop(idx)
        #print(s)
    return s

print(seq(n,k))

# Sudoku Solver

def solve(board) :
            for i in range(len(board)) :
                for j in range(len(board)) :
                    if board[i][j] == "." :
                        for x in range(len(board)) :
                            if (isvalid(board,i,j,x)) :
                                board[i][j] = str(x)
                                if solve(board) :
                                    return True
                                else :
                                    board[i][j] = "."
                        return False
            return True
def isvalid(board,row,col,x) :
            for i in range(len(board)) :
                if board[i][col] == str(x) :
                    return False
            for i in range(len(board)) :
                if board[row][i] == str(x) :
                    return False
            for i in range(len(board)) :
                if board[3*(row//3) + i//3][3*(col//3) + i//3] == str(x) :
                    return False
            return True



solve(board)
