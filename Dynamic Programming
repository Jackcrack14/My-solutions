# Solution to Egg drop problem
def eggdrop(n,k):
    max_chance = 2 * n
    return min(max_chance,min_prob(k))

def min_prob(k) :
    arr = [0 for i in range(k)]

    arr[0] = 1
    arr[1] = 2
    i = 1
    while (arr[i]<= k) :
        i = i+1
        arr[i] = arr[i-1] + arr[i-2]

    return i - 1

min_prob(10)
print(eggdrop(4,20))


# Longest path in matrix with difference 1 


 
 
def each_path(i, j, mat, dp):
    # Base case
    if (i < 0 or i >= n or j < 0 or j >= n):
        return 0
 
    # If this subproblem is already solved
    if (dp[i][j] != -1):
        return dp[i][j]
 
    # To store the path lengths in all the four directions
    x, y, z, w = -1, -1, -1, -1
 
    # Since all numbers are unique and in range from 1 to n * n,
    # there is atmost one possible direction from any cell
    if (j < n-1 and ((mat[i][j] + 1) == mat[i][j + 1])):
        x = 1 + each_path(i, j + 1, mat, dp)
 
    if (j > 0 and (mat[i][j] + 1 == mat[i][j-1])):
        y = 1 + each_path(i, j-1, mat, dp)
 
    if (i > 0 and (mat[i][j] + 1 == mat[i-1][j])):
        z = 1 + each_path(i-1, j, mat, dp)
 
    if (i < n-1 and (mat[i][j] + 1 == mat[i + 1][j])):
        w = 1 + each_path(i + 1, j, mat, dp)
 
    # If none of the adjacent fours is one greater we will take 1
    # otherwise we will pick maximum from all the four directions
    dp[i][j] = max(x, max(y, max(z, max(w, 1))))
    return dp[i][j]
 
 
# Returns length of the longest path beginning with any cell
def Longestpath(mat):
    result = 1  # Initialize result
 
    # Create a lookup table and fill all entries in it as -1
    dp = [[-1 for i in range(n)]for i in range(n)]
 
    # Compute longest path beginning from all cells
    for i in range(n):
        for j in range(n):
            if (dp[i][j] == -1):
                each_path(i, j, mat, dp)
            # Update result if needed
            result = max(result, dp[i][j])
    return result
 
 

mat = [[1, 2, 9],
       [5, 3, 8],
       [4, 6, 7]]
n = 3
print("Length of the longest path is ", Longestpath(mat))
