# DFS Traversal of Graph

    from collections import defaultdict
    class Graph() :
        def __init__(self,vertices) :
            self.v = vertices

            self.graph = defaultdict(list)

        def add_edge(self,u,v) :
            self.graph[u].append(v)

        def dfs(self,src,tar,path=[],visited=set()) :
            path.append(src)
            visited.add(src)
            if src == tar :
                return path
            for node in self.graph[src] :
                if node not in visited :
                    res = self.dfs(node,tar,path,visited)
                    if res is not None :
                        return res


 # BFS Traversal of Graph
 
  def bfs(self,src,tar) :
        q = Queue()
        visited= set()
        q.put(src)
        visited.add(src)
        parent = dict()
        parent[src] = None
        path_found = False
        while q is not q.empty() :
            current = q.get()
            if current == tar :
                path_found = True
                break
            for node in self.graph[current] :
                if node not in visited :
                    q.put(node)
                    parent[node] = current
                    visited.add(node)

        path = []
        if path_found :
            path.append(tar)
            while parent[tar] is not None :
                path.append(parent[tar])
                tar = parent[tar]
        return path


# checking cyclic using Disjoint Set Union

def find_parent(self, parent,i):
        if parent[i] == -1:
            return i
        if parent[i]!= -1:
             return self.find_parent(parent,parent[i])
 
    # A utility function to do union of two subsets
    def union(self,parent,x,y):
        parent[x] = y
 
  
  
    # The main function to check whether a given graph
    # contains cycle or not
    def isCyclic(self):
         
        # Allocate memory for creating V subsets and
        # Initialize all subsets as single element sets
        parent = [-1]*(self.V)
 
        # Iterate through all edges of graph, find subset of both
        # vertices of every edge, if both subsets are same, then
        # there is cycle in graph.
        for i in self.graph:
            for j in self.graph[i]:
                x = self.find_parent(parent, i)
                y = self.find_parent(parent, j)
                if x == y:
                    return True
                self.union(parent,x,y)
 
